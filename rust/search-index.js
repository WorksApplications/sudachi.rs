var searchIndex = new Map(JSON.parse('[\
["sudachi",{"doc":"Clone of Sudachi, a Japanese morphological analyzer","t":"CCCCCCCCCCQPPPRGFKNNNNNNNNNNCNNNNNNNNNNNNNCNCCNCNNCCNNNMNNNNNNNFGTPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNKFKFKMNNNNNNNNNNHHMNMNNNNNNNNNNNMNNNNNMNNNNNNNMNNNNNNNMNNFNNNNNNNNNNNNNNNNNNNKFNNNNMMNMNMMNNNNFFGPPPPPPPPPPPPPGNNNNNNNNNONNNNNNNONNHHNNNNNNNNNNNNNNNNNNNNNNONNNNNNOOONNNNNNNNONNNNNNNNNNNNNNNNNNONFFNNNNCCCCCNNNCNOOCONNNCNOCONNCNNNCCNNNNNNNCKPGFPGNNNNNNNMNCNNNNNNNNNMNNNNNNNCNNNNNNNNNNNNNGPFIPPPPPPPPPPPPPPPPPPPNNNNOONNNNNNNNNONNNNNNNNNOOOOOOOFNNNNNNNNNNNTTTFTTTTTTTTTTTTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFGPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNFNNNNNNNNNNNNNNNNTTFTNNONNNNNNNNONNNONNNPFGGPPPTPGPGPPPPPNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONFFSNNNNONNNNNNNNNNNNNNNNCNNNNNNNOCCCFFFNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNOFFNNNNNNNNNNNNNNNNNNNFFFNONONNNNNNNNNNNNNNONONNNNNNNNONNNNNONONONONONNNNNNNNNNNNOFNNNNNNNNNNNNNFGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHPPPGFNNNNNNNNNNNNNNNNNNNTTFTTTTTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTTTFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGGIIPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOFFKNNNNNNMNMNMNNMNNNNMNNNNNNNNNNNNNNMNNNNNNNNNNNNMNNNNNNNNNNNRRPPPKGPNNMMCMCNNNNNNCNCCNNNNNOOKNNNMMKNNCNNMMNFNNNNNNNNNNNKNNNCMCMCFNNNNNNNNNNGPPNNNNNNNNNNNNNNNNNFNNNNNNNNNNKNNNCCMMFNNNNNNNNNNFNNNNNNNNNNFNNNNNNNNNNNNNNNNNEEEEEFFNNNNONNNNNNNNNNNNNNFFKNNNNNNNNNNNNMNNNNNNNNN","n":["analysis","config","dic","error","input_text","plugin","pos","prelude","sentence_detector","sentence_splitter","sudachi_dso_plugin","A","B","C","Dictionary","Mode","Node","Tokenize","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cost","created","end","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_str","into","into","lattice","left_id","mlist","morpheme","new","node","right_id","set_range","stateful_tokenizer","stateless_tokenizer","to_owned","to_owned","to_string","tokenize","try_from","try_from","try_into","try_into","type_id","type_id","word_id","CreatedWords","HasWord","MAX_VALUE","Maybe","No","Yes","add","add_word","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","empty","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","has_word","into","into","is_empty","not_empty","single","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Lattice","borrow","borrow_mut","connect_eos","connect_node","default","dump","fill_top_path","from","has_previous_node","insert","into","node","reset","try_from","try_into","type_id","MorphemeIter","MorphemeList","borrow","borrow","borrow_mut","borrow_mut","clear","collect_results","copy_slice","dict","empty","empty_clone","from","from","from_components","get","get_internal_cost","into","into","into_iter","is_empty","iter","len","len","lookup","next","size_hint","split","split_into","subset","surface","try_from","try_from","try_into","try_into","type_id","type_id","Morpheme","begin","begin_c","borrow","borrow_mut","dictionary_form","dictionary_id","end","end_c","fmt","from","get_word_info","index","into","is_oov","normalized_form","part_of_speech","part_of_speech_id","reading_form","split","split_into","surface","synonym_group_ids","total_cost","try_from","try_into","type_id","word_id","LatticeNode","NodeSplitIterator","PathCost","ResultNode","RightId","begin","begin","begin_bytes","borrow","borrow","borrow_mut","borrow_mut","bytes_range","char_range","clone","clone_into","concat_nodes","concat_oov_nodes","cost","cost","end","end","end_bytes","fmt","from","from","into","into","into_iter","is_connected_to_bos","is_oov","is_special_node","left_id","left_id","new","next","num_codepts","num_splits","right_id","right_id","set_bytes_range","set_char_range","size_hint","split","to_owned","to_string","total_cost","total_cost","try_from","try_from","try_into","try_into","type_id","type_id","word_id","word_id","word_info","StatefulTokenizer","borrow","borrow_mut","create","dict","dict_clone","do_tokenize","from","into","into_morpheme_list","mode","new","reset","set_debug","set_mode","set_subset","swap_result","try_from","try_into","type_id","DictionaryAccess","StatelessTokenizer","as_dict","borrow","borrow_mut","from","grammar","input_text_plugins","into","lexicon","new","oov_provider_plugins","path_rewrite_plugins","tokenize","try_from","try_into","type_id","Config","ConfigBuilder","ConfigError","Dictionary","DictionaryAndSurface","FileNotFound","InvalidFormat","Io","MissingArgument","Normalized","NormalizedAndSurface","NormalizedNouns","PathResolution","Reading","SerdeError","Surface","SurfaceProjection","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","character_definition_file","clone","clone","clone","clone_into","clone_into","clone_into","complete_path","connection_cost_plugins","default","default","default_config_location","default_resource_dir","deserialize","deserialize","empty","eq","equivalent","equivalent","equivalent","fallback","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bytes","from_file","from_opt_file","input_text_plugins","into","into","into","into","minimal_at","new","oov_provider_plugins","path_rewrite_plugins","projection","required_subset","resolve_paths","resolved_system_dict","resolved_user_dicts","resource_path","root_directory","source","system_dict","system_dict","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","user_dict","user_dicts","with_system_dic","DictionaryLoader","LoadedDictionary","borrow","borrow","borrow_mut","borrow_mut","build","category_type","character_category","connect","dictionary","from","from","from_system_dictionary","grammar","grammar","grammar","grammar","header","header","input_text_plugins","into","into","lexicon","lexicon","lexicon","lexicon_set","lexicon_set","oov_provider_plugins","path_rewrite_plugins","read","read_any_dictionary","read_system_dictionary","read_user_dictionary","storage","subset","to_loaded","try_from","try_from","try_into","try_into","type_id","type_id","word_id","AsDataSource","Data","DataSource","DictBuilder","File","NoDic","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compile","convert","convert","error","from","from","from","grammar","input_text_plugins","into","into","into","lexicon","name","name","new_system","new_user","oov_provider_plugins","path_rewrite_plugins","read_conn","read_lexicon","report","report","resolve","set_compile_time","set_description","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BuildFailure","CsvError","DicBuildError","DicWriteResult","EmptySurface","Err","InvalidCharLiteral","InvalidConnSize","InvalidFieldSize","InvalidI16Literal","InvalidSize","InvalidSplit","InvalidSplitWordReference","InvalidU32Literal","InvalidWordId","Io","NoRawField","Ok","PosLimitExceeded","SplitFormatError","TrieBuildFailure","UnresolvedSplits","WordIdTableNotBuilt","borrow","borrow","borrow_mut","borrow_mut","cause","file","fmt","fmt","fmt","fmt","from","from","from","into","into","line","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","actual","actual","expected","expected","field","field","original","DictPartReport","borrow","borrow_mut","from","into","is_write","part","size","time","try_from","try_into","type_id","ALL","ALPHA","CYRILLIC","CategoryType","DEFAULT","GREEK","HIRAGANA","KANJI","KANJINUMERIC","KATAKANA","NOOOVBOW","NOOOVBOW2","NUMERIC","SPACE","SYMBOL","USER1","USER2","USER3","USER4","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","complement","contains","count","default","difference","empty","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_str","hash","insert","intersection","intersects","into","into_iter","is_all","is_empty","iter","iter_names","not","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","CharCategoryIter","CharacterCategory","Error","InvalidCategoryType","InvalidChar","InvalidFormat","MultipleTypeDefinition","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_file","from_reader","get_category_types","into","into","into","into_iter","iter","multiunzip","next","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ConnectionMatrix","borrow","borrow_mut","cost","from","from_offset_size","into","num_left","num_right","try_from","try_into","type_id","update","JapaneseDictionary","borrow","borrow_mut","from","from_cfg","from_cfg_storage","grammar","grammar","input_text_plugins","into","lexicon","lexicon","oov_provider_plugins","path_rewrite_plugins","try_from","try_into","type_id","BOS_PARAMETER","EOS_PARAMETER","Grammar","INHIBITED_CONNECTION","borrow","borrow_mut","character_category","conn_matrix","connect_cost","from","get_part_of_speech_id","into","merge","parse","pos_components","pos_list","register_pos","set_character_category","set_connect_cost","storage_size","try_from","try_into","type_id","CannotParse","Header","HeaderError","HeaderVersion","InvalidSystemDictVersion","InvalidUserDictVersion","InvalidVersion","STORAGE_SIZE","SystemDict","SystemDictVersion","UserDict","UserDictVersion","Version1","Version1","Version2","Version2","Version3","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","create_time","description","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_u64","has_grammar","has_synonym_group_ids","into","into","into","into","into","new","parse","set_time","to_owned","to_owned","to_owned","to_owned","to_string","to_u64","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","write_to","Lexicon","LexiconEntry","MAX_DICTIONARIES","borrow","borrow","borrow_mut","borrow_mut","end","eq","equivalent","equivalent","equivalent","fmt","from","from","get_word_info","get_word_param","into","into","lookup","new","parse","set_dic_id","size","trie","try_from","try_from","try_into","try_into","type_id","type_id","update_cost","word_id","word_id_table","word_infos","word_params","Trie","TrieEntry","TrieEntryIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","common_prefix_iterator","end","eq","equivalent","equivalent","equivalent","fmt","from","from","from","into","into","into","into_iter","new","new","new_owned","next","to_owned","total_size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","WordIdIter","WordIdTable","borrow","borrow","borrow_mut","borrow_mut","entries","from","from","into","into","into_iter","new","next","storage_size","try_from","try_from","try_into","try_into","type_id","type_id","WordInfo","WordInfoData","WordInfos","a_unit_split","a_unit_split","b_unit_split","b_unit_split","borrow","borrow","borrow","borrow_data","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","dictionary_form","dictionary_form","dictionary_form_word_id","dictionary_form_word_id","fmt","from","from","from","from","from","get_word_info","head_word_length","head_word_length","into","into","into","new","normalized_form","normalized_form","pos_id","pos_id","reading_form","reading_form","surface","surface","synonym_group_ids","synonym_group_ids","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","word_structure","word_structure","WordParams","borrow","borrow_mut","from","get_cost","get_params","into","new","set_cost","size","storage_size","try_from","try_into","type_id","LexiconSet","LexiconSetError","TooLargeDictionaryId","TooLargeWordId","TooManyDictionaries","append","borrow","borrow","borrow_mut","borrow_mut","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","get_word_info","get_word_info_subset","get_word_param","into","into","is_full","lookup","new","size","to_string","try_from","try_from","try_into","try_into","type_id","type_id","skip_u32_array","skip_wid_array","u32_array_parser","u32_parser","u32_wid_array_parser","Borrowed","File","Owned","Storage","SudachiDicData","add_user","as_ref","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new","system","system_static_slice","try_from","try_from","try_into","try_into","type_id","type_id","DIC_FORM_WORD_ID","HEAD_WORD_LENGTH","InfoSubset","NORMALIZED_FORM","POS_ID","READING_FORM","SPLIT_A","SPLIT_B","SURFACE","SYNONYM_GROUP_ID","WORD_STRUCTURE","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","complement","contains","default","difference","empty","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","insert","intersection","intersects","into","into_iter","is_all","is_empty","iter","iter_names","normalize","not","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","BOS","EOS","INVALID","MAX_WORD","WordId","as_raw","borrow","borrow_mut","checked","clone","clone_into","cmp","compare","dic","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_raw","hash","into","is_oov","is_special","is_system","is_user","new","oov","partial_cmp","to_owned","to_string","try_from","try_into","type_id","word","ConfigError","DictionaryCompilationError","EosBosDisconnect","Err","Err","ErrWithContext","FromUtf16","InputTooLong","InvalidCharacterCategory","InvalidCharacterCategoryType","InvalidDataFormat","InvalidDictionaryGrammar","InvalidHeader","InvalidPartOfSpeech","InvalidRange","InvalidUtf16FromNom","Io","LexiconSetError","MorphemeListBorrowed","NoOOVPluginProvided","Nom","NomParseError","Ok","Ok","OutOfBounds","ParseIntError","PluginError","RegexError","SerdeError","SudachiError","SudachiNomError","SudachiNomResult","SudachiResult","Utf16String","append","borrow","borrow","borrow_mut","borrow_mut","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_error_kind","into","into","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_context","cause","cause","context","context","InputBuffer","InputEditor","InputTextIndex","borrow","borrow","borrow_mut","borrow_mut","build","can_bow","cat_at_char","cat_at_char","cat_continuous_len","cat_continuous_len","cat_of_range","cat_of_range","ch_idx","char_distance","char_distance","clone","clone_into","curr_byte_offsets","curr_slice","curr_slice","curr_slice_c","current","current_chars","default","from","from","from","get_original_index","get_word_candidate_length","into","into","into_original","new","orig_slice","orig_slice","orig_slice_c","original","refresh_chars","replace_char","replace_char_iter","replace_own","replace_ref","reset","start_build","swap_original","to_curr_byte_idx","to_orig","to_orig","to_orig_byte_idx","to_orig_char_idx","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_editor","BoxType","InitFnType","InvalidDataFormat","Io","Libloading","PluginCategory","PluginError","SerdeError","borrow","borrow_mut","bundled_impl","configurations","connect_cost","do_setup","dso","fmt","fmt","from","from","from","from","input_text","into","oov","path_rewrite","source","to_string","try_from","try_into","type_id","message","source","EditConnectionCostPlugin","bundled_impl","configurations","do_setup","edit","set_up","InputTextPlugin","bundled_impl","configurations","default_input_text","do_setup","rewrite","rewrite_impl","set_up","uses_chars","DefaultInputTextPlugin","borrow","borrow_mut","default","from","into","rewrite_impl","set_up","try_from","try_into","type_id","uses_chars","OovProviderPlugin","bundled_impl","configurations","do_setup","mecab_oov","provide_oov","regex_oov","set_up","simple_oov","MeCabOovPlugin","borrow","borrow_mut","default","from","into","provide_oov","set_up","try_from","try_into","type_id","BoundaryMode","Relaxed","Strict","borrow","borrow_mut","clone","clone_into","default","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","into","to_owned","try_from","try_into","type_id","SimpleOovPlugin","borrow","borrow_mut","default","from","into","provide_oov","set_up","try_from","try_into","type_id","PathRewritePlugin","bundled_impl","configurations","do_setup","join_katakana_oov","join_numeric","rewrite","set_up","JoinKatakanaOovPlugin","borrow","borrow_mut","default","from","into","rewrite","set_up","try_from","try_into","type_id","JoinNumericPlugin","borrow","borrow_mut","default","from","into","rewrite","set_up","try_from","try_into","type_id","PosMatcher","borrow","borrow_mut","clone","clone_into","difference","entries","from","intersection","into","matches_id","new","num_entries","to_owned","try_from","try_into","type_id","union","Mode","Morpheme","MorphemeList","SudachiError","SudachiResult","NonBreakChecker","SentenceDetector","borrow","borrow","borrow_mut","borrow_mut","bos","from","from","get_eos","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","with_limit","SentenceIter","SentenceSplitter","SplitSentences","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","into_iter","multiunzip","new","next","split","split","try_from","try_from","try_into","try_into","type_id","type_id","with_checker","with_limit"],"q":[[0,"sudachi"],[11,"sudachi::analysis"],[63,"sudachi::analysis::created"],[107,"sudachi::analysis::lattice"],[124,"sudachi::analysis::mlist"],[161,"sudachi::analysis::morpheme"],[189,"sudachi::analysis::node"],[246,"sudachi::analysis::stateful_tokenizer"],[266,"sudachi::analysis::stateless_tokenizer"],[283,"sudachi::config"],[383,"sudachi::dic"],[427,"sudachi::dic::build"],[474,"sudachi::dic::build::error"],[522,"sudachi::dic::build::error::BuildFailure"],[529,"sudachi::dic::build::report"],[541,"sudachi::dic::category_type"],[619,"sudachi::dic::character_category"],[666,"sudachi::dic::connect"],[679,"sudachi::dic::dictionary"],[696,"sudachi::dic::grammar"],[719,"sudachi::dic::header"],[821,"sudachi::dic::lexicon"],[857,"sudachi::dic::lexicon::trie"],[898,"sudachi::dic::lexicon::word_id_table"],[919,"sudachi::dic::lexicon::word_infos"],[979,"sudachi::dic::lexicon::word_params"],[993,"sudachi::dic::lexicon_set"],[1027,"sudachi::dic::read"],[1032,"sudachi::dic::storage"],[1056,"sudachi::dic::subset"],[1124,"sudachi::dic::word_id"],[1161,"sudachi::error"],[1230,"sudachi::error::SudachiError"],[1234,"sudachi::input_text"],[1295,"sudachi::plugin"],[1325,"sudachi::plugin::PluginError"],[1327,"sudachi::plugin::connect_cost"],[1333,"sudachi::plugin::input_text"],[1342,"sudachi::plugin::input_text::default_input_text"],[1354,"sudachi::plugin::oov"],[1363,"sudachi::plugin::oov::mecab_oov"],[1374,"sudachi::plugin::oov::regex_oov"],[1394,"sudachi::plugin::oov::simple_oov"],[1405,"sudachi::plugin::path_rewrite"],[1413,"sudachi::plugin::path_rewrite::join_katakana_oov"],[1424,"sudachi::plugin::path_rewrite::join_numeric"],[1435,"sudachi::pos"],[1453,"sudachi::prelude"],[1458,"sudachi::sentence_detector"],[1479,"sudachi::sentence_splitter"],[1504,"core::fmt"],[1505,"core::fmt"],[1506,"alloc::string"],[1507,"core::any"],[1508,"core::convert"],[1509,"core::marker"],[1510,"std::io"],[1511,"alloc::vec"],[1512,"core::clone"],[1513,"core::option"],[1514,"core::cell"],[1515,"core::ops::range"],[1516,"core::ops::deref"],[1517,"alloc::boxed"],[1518,"std::path"],[1519,"std::path"],[1520,"serde_json::error"],[1521,"std::io::error"],[1522,"core::error"],[1523,"std::time"],[1524,"core::time"],[1525,"core::iter::traits::collect"],[1526,"core::hash"],[1527,"bitflags::iter"],[1528,"bitflags::iter"],[1529,"core::cmp"],[1530,"nom::error"],[1531,"core::cmp"],[1532,"nom::internal"],[1533,"alloc::string"],[1534,"core::ops::function"],[1535,"serde_json::value"],[1536,"libloading::error"]],"d":["","","","","","","","","","","Create an entry point into sudachi DSO plugin","Short","Middle (similar to “word”)","Named Entity","","Unit to split text","","Able to tokenize Japanese text","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Break text into <code>Morpheme</code>s","","","","","","","","Bitset which represents that a word of a specified length …","","Maximum supported length of the word","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Lattice which is constructed for performing the Viterbi …","","","Find EOS node – finish the lattice construction","Find the path with the minimal cost through the lattice to …","","","Fill the path with the minimum cost (indices only). …","Returns the argument unchanged.","Checks if there exist at least one at the word end boundary","Insert a single node in the lattice, founding the path to …","Calls <code>U::from(self)</code>.","Lookup a node for the index","Prepare lattice for the next analysis of a sentence with …","","","","Iterates over morpheme list","","","","","","Clears morphemes from analysis result","","","","Returns an empty morpheme list","","Returns the argument unchanged.","Returns the argument unchanged.","Creates MorphemeList from components","","Gets the whole cost of the path","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns a new morpheme list splitting the morpheme with a …","Splits morphemes and writes them into the resulting list …","","","","","","","","","A morpheme (basic semantic unit of language)","Returns the begin index in bytes of the morpheme in the …","Returns the codepoint offset of the morpheme begin in the …","","","Returns the dictionary form of morpheme","Returns the dictionary id where the morpheme belongs","Returns the end index in bytes of the morpheme in the …","Returns the codepoint offset of the morpheme begin in the …","","Returns the argument unchanged.","","Returns the index of this morpheme","Calls <code>U::from(self)</code>.","Returns if this morpheme is out of vocabulary","Returns the normalized form of morpheme","Returns the part of speech","","Returns the reading form of morpheme.","Returns new morpheme list splitting the morpheme with …","Splits morpheme and writes sub-morphemes into the provided …","Returns a substring of the original text which corresponds …","","Returns total cost from the beginning of the path","","","","Returns the word id of morpheme","","","Accessor trait for the full path cost","Full lattice node, as the result of analysis. All indices …","Accessor trait for right connection id","","","Returns begin offset in bytes of node surface in a sentence","","","","","Returns range in bytes (for easy string slicing)","Utility method for extracting [begin, end) codepoint range.","","","Concatenate the nodes in the range and replace …","Concatenate the nodes in the range and set pos_id.","","","","","Returns end offset in bytes of node surface in a sentence","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Is true when the word does not come from the dictionary. …","If a node is a special system node like BOS or EOS. Java …","","","","","Returns number of codepoints in the current node","Returns number of splits in a specified mode","","","","","","Split the node with a specified mode using the dictionary …","","","","","","","","","","","","","","","","","Create a new debug stateful tokenizer with the following …","Borrow current dictionary","Get a clone of current dictionary","Perform the actual tokenization so the analysis result …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Consume the Tokenizer and produce MorphemeList","Return current analysis mode","Create a new non-debug stateful tokenizer","Prepare StatefulTokenizer for the next data. Data must be …","Set debug flag and returns the current one","Set the analysis mode and returns the current one","Analyzer will read only following [<code>WordInfo</code>] field subset","Swap result data with the current analyzer","","","","Provides access to dictionary data","Implementation of a Tokenizer which does not have …","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Setting data loaded from config file","Struct corresponds with raw config json file. You must use …","Sudachi Error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Resolves a possibly relative path with regards to all …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a minimal config with the provided resource …","","","","","Return required InfoSubset for the current projection type","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the system dictionary to the provided path","A single system or user dictionary","A dictionary consists of one system_dict and zero or more …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a system dictionary from bytes, and load a …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Creates a binary dictionary from bytes","Creates a system binary dictionary from bytes","Creates a user binary dictionary from bytes","","","","","","","","","","","","","","Builds a binary dictionary from csv lexicon and connection …","","","","","","","","","Compile the binary dictionary and write it to the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new builder for system dictionary","Creates a new builder for user dictionary","","","Read the connection matrix from either a file or an …","Read the csv lexicon from either a file or an in-memory …","","Return dictionary build report","Resolve the dictionary references.","Set the dictionary compile time to the specified time …","Set the dictionary description","","","","","","","","","","Actual specific errors for dictionary compilation","","Dictionary building-process related parent error. Captures …","","","Contains the error value","","","","","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","All categories at once except NOOOVBOW/2 ","Latin alphabets. ","Cyrillic alphabets. ","A set of categories for a character","The fall back category. ","Greek alphabets. ","Hiragana characters. ","CJKV ideographic characters. ","Kanji numeric characters. ","Katakana characters. ","This character cannot be the beginning of an OOV word ","This and next characters cannot be the beginning of an OOV …","Numerical characters. ","White spaces. ","Symbols. ","User defined category. ","User defined category. ","User defined category. ","User defined category. ","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","","","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","CharacterCategory holds mapping from character to …","Sudachi error","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a character category from file","","Returns a set of category types which given char has","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Gets the value of the connection matrix","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns maximum number of left connection ID","Returns maximum number of right connection ID","","","","","","","","Returns the argument unchanged.","Creates a dictionary from the specified configuration …","Creats a dictionary from the specified configuration and …","Returns grammar with the correct lifetime","","","Calls <code>U::from(self)</code>.","Returns lexicon with the correct lifetime","","","","","","","","","Dictionary grammar","","","","The mapping from character to character_category_type","","Returns connection cost of nodes","Returns the argument unchanged.","Returns a pos_id of given pos in the grammar","Calls <code>U::from(self)</code>.","Merge a another grammar into this grammar","Creates a Grammar from dictionary bytes","Gets POS components for POS ID. Panics if out of bounds.","","","Sets character category","Sets connect cost for a specific pair of ids","","","","","","Dictionary header","Sudachi error","Header version","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns if this header version has grammar","Returns if this header version has synonym group ids","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates new system dictionary header Its version field …","Creates a new header from a dictionary bytes","Set creation time","","","","","","","","","","","","","","","","","","","","","","","","Dictionary lexicon","Result of the Lexicon lookup","The first 4 bits of word_id are used to indicate that from …","","","","","Byte index of the word end","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns WordInfo for given word_id","Returns word_param for given word_id. Params are (left_id, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator of word_id and end of words that …","","","Assign lexicon id to the current Lexicon","","","","","","","","","update word_param cost based on current tokenizer","Id of the returned word","","","","","","","","","","","","","","","","Offset of word end","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Value of Trie, this is not the pointer to WordId, but the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","WordInfo API.","Internal storage of the WordInfo. It is not accessible by …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","Set of Lexicons","Sudachi error","","","","Add a lexicon to the lexicon list","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns WordInfo for given WordId","Returns WordInfo for given WordId. Only fills a requested …","Returns word_param for given word_id","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns if dictionary capacity is full","Returns iterator which yields all words in the dictionary, …","Creates a LexiconSet given a lexicon","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","Dictionary word ID","","","","Creates the WordId with correctness checking","","","","","Extract Dictionary ID","","","","","","","Returns the argument unchanged.","Create WordId from the compressed representation","","Calls <code>U::from(self)</code>.","Check if the word is OOV An OOV node can come of OOV …","Checks if the WordId corresponds to a special node","Check if the word comes from the system dictionary","Check if the word comes from the user dictionary","Create WordId from parts","Creates an OOV node for pos_id","","","","","","","Extract Word ID","","","","Contains the error value","Contains the error value","","","","","","","","","","","","","","","","","","Contains the success value","Contains the success value","","","","","","Sudachi error","Custum nom error","","","Failed to parse utf16 string","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","InputBuffer - prepares the input data for the analysis","","Provides fast indexed access into the input text","","","","","Finalizes InputBuffer state, making it RO","Whether the byte can start a new word. Supports bytes not …","Character category at char offset","","Number of chars to the right of the offset with the same …","","Common character category inside the range. Indexed by …","","","Distance in chars between the char indexed by <code>index</code> and …","","","","Returns byte offsets of current chars","Returns substring of the current (modified) text by …","","Input: Mod Char Idx","Borrow modified data","Borrow array of current characters","","Returns the argument unchanged.","Returns the argument unchanged.","Creates input from the passed string. Should be used …","Get index of the current byte in original sentence Bytes …","Returns char length to the next can_bow point","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return original data as owned, consuming itself    ","Creates new InputBuffer","Returns substring of original text by indices from the …","","Input: Mod Char Idx","Borrow original data","Recompute chars from modified string (useful if the …","Replace range with char","Replace range with char, followed by chars from iterator","Replace range with owned String","Replace range with a &amp;str","Resets the input buffer, so it could be used to process …","Moves InputBuffer into RW state, making it possible to …","Swaps original data with the passed location","Mod Char Idx -&gt; Mod Byte Idx","Translate range from current state to original. …","","Mod Char Idx -&gt; Orig Byte Idx","Mod Char Idx -&gt; Orig Char Idx","","","","","","","","Execute a function which can modify the contents of the …","Boxed type of the plugin. Should be Box.","Type of the initialization function. It must take 0 …","","","","A category of Plugins","","","","","Create bundled plugin for plugin name Instead of full name …","Extract plugin configurations from the config","","Perform initial setup. We can’t call set_up of the …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Trait of plugin to edit connection cost in the grammar","","","","Edits the grammar","Loads necessary information for the plugin","Trait of plugin to modify the input text before …","","","","","Perform rewrites","Actual implementation of rewriting. Call <code>apply_rewrite</code> …","Loads necessary information for the plugin","Whether the rewrite process uses chars","Provides basic normalization of the input text","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Trait of plugin to provide oov node during tokenization","","","","","Generate a list of oov nodes offset - char idx","","Loads necessary information for the plugin","","provides MeCab oov nodes","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Provides a OOV node with single character if no words …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Trait of plugin to rewrite the path from lattice","","","","","","Returns a rewritten path","Loads necessary information for the plugin","Concatenates katakana oov nodes into one","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Concatenates numeric nodes as one","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","A checker for words that cross boundaries","A sentence boundary detector","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the byte index of the detected end of the sentence.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,3,3,3,15,0,0,0,1,1,3,1,3,1,3,1,3,1,0,1,3,3,3,3,1,3,3,1,3,3,1,3,0,1,0,0,1,0,1,1,0,0,1,3,3,15,1,3,1,3,1,3,1,0,0,19,22,22,22,19,19,19,22,19,22,19,22,19,22,19,19,19,22,19,19,19,22,22,22,19,22,19,22,19,19,22,19,19,19,19,22,19,22,19,22,19,22,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,16,38,16,38,16,16,16,16,16,16,16,38,16,16,16,16,38,38,16,16,16,38,16,38,38,16,16,16,16,16,38,16,38,16,38,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,0,0,44,35,35,47,35,47,35,35,44,35,35,0,0,44,35,44,35,35,35,47,35,47,35,47,46,44,44,44,35,35,47,44,35,48,35,35,35,47,35,35,35,46,35,47,35,47,35,47,35,44,35,35,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,49,49,49,49,32,32,49,32,49,32,32,49,49,49,49,0,0,0,57,57,59,59,59,59,57,57,57,59,57,59,57,0,59,57,56,55,59,57,56,55,55,56,57,56,55,57,56,55,56,56,57,56,0,0,57,55,55,57,57,57,57,55,59,59,57,56,55,59,59,59,57,56,55,55,55,55,56,59,57,56,55,56,56,56,56,56,57,56,56,56,55,55,59,55,56,57,56,55,59,59,57,57,56,55,59,57,56,55,59,57,56,55,55,56,56,0,0,67,68,67,68,0,0,0,0,0,67,68,67,0,67,67,68,0,68,67,67,68,0,67,68,0,67,67,67,0,68,68,68,0,0,68,67,68,67,68,67,68,0,0,71,0,0,71,0,71,72,69,71,72,69,69,70,71,0,71,72,69,72,72,71,72,69,72,70,71,69,69,72,72,69,69,0,69,69,69,69,71,72,69,71,72,69,71,72,69,0,76,0,0,76,143,76,76,76,76,76,76,76,76,76,76,76,143,76,76,76,76,76,75,76,75,76,75,75,75,75,76,76,75,76,76,75,76,75,76,75,76,75,76,75,76,75,76,144,145,144,145,145,146,146,0,73,73,73,73,73,73,73,73,73,73,73,78,78,78,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,0,85,85,85,85,88,85,84,88,85,84,84,84,84,85,85,85,85,85,85,84,88,85,84,84,84,84,88,85,84,88,84,88,88,84,85,88,85,84,88,85,84,88,85,84,0,25,25,25,25,25,25,25,25,25,25,25,25,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,28,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,96,0,0,0,96,96,96,95,92,0,92,0,93,94,93,94,94,96,92,93,94,95,96,92,93,94,95,92,93,94,95,92,93,94,95,95,95,96,92,93,94,95,96,96,96,92,92,92,93,93,93,94,94,94,95,95,95,96,96,92,93,94,95,96,92,93,94,95,92,95,95,96,92,93,94,95,95,95,95,92,93,94,95,96,92,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,95,95,0,0,0,99,98,99,98,98,98,98,98,98,98,99,98,99,99,99,98,99,98,99,99,99,0,99,98,99,98,99,98,99,98,0,0,0,0,0,0,102,103,101,102,103,101,101,101,102,101,101,101,101,101,101,102,103,101,102,103,101,103,102,101,102,103,101,102,102,103,101,102,103,101,102,103,101,101,0,0,104,105,104,105,104,104,105,104,105,105,104,105,104,104,105,104,105,104,105,0,0,0,41,106,41,106,107,106,41,41,107,106,41,106,41,106,41,106,41,41,106,41,106,106,107,106,106,41,41,107,41,106,107,106,41,107,41,106,41,106,41,106,41,106,41,106,106,41,107,106,41,107,106,41,107,106,41,41,106,0,108,108,108,108,108,108,108,108,108,108,108,108,108,0,0,109,109,109,29,29,109,29,109,109,109,109,109,109,109,29,109,29,29,29,29,109,29,29,29,29,109,29,109,29,109,29,109,0,0,0,0,0,111,111,111,0,0,90,111,111,90,111,90,111,90,111,90,90,90,90,111,90,111,90,111,90,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,116,116,116,17,110,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,114,116,17,110,114,116,116,116,116,0,0,0,0,114,114,116,114,116,114,114,116,116,114,116,116,116,116,116,116,116,116,116,116,116,116,116,114,114,116,114,116,116,116,114,116,114,116,114,116,147,148,147,148,0,0,0,124,27,124,27,27,27,123,27,123,27,123,27,27,123,27,27,27,27,123,27,27,27,27,27,124,27,27,27,27,124,27,27,27,123,27,27,27,27,124,124,124,124,27,27,27,27,123,27,27,27,27,124,27,124,27,124,27,27,149,149,120,120,120,0,0,120,120,120,149,149,0,149,0,120,120,120,120,120,120,0,120,0,0,120,120,120,120,120,150,150,0,129,129,129,129,129,0,51,51,0,51,51,51,51,51,0,130,130,130,130,130,130,130,130,130,130,130,0,53,53,53,0,53,0,53,0,0,131,131,131,131,131,131,131,131,131,131,0,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,0,133,133,133,133,133,133,133,133,133,133,0,54,54,54,0,0,54,54,0,134,134,134,134,134,134,134,134,134,134,0,135,135,135,135,135,135,135,135,135,135,0,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,0,0,0,0,0,0,0,138,137,138,137,138,138,137,137,138,137,138,137,138,137,138,137,138,137,137,0,0,0,141,140,141,140,141,140,141,140,141,141,140,141,142,140,141,140,141,140,141,140,140,140],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[1,5],0,[1,2],[[3,3],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[1,7],8],[[3,7],8],[[3,7],8],[-1,-1,[]],[-1,-1,[]],[9,[[10,[3,-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,11],0,0,[[11,11,11,11,5,12],1],0,[1,11],[[1,11,11],4],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[[[15,[],[[14,[-1]]]],9,3,6],[[17,[[16,[-1]]]]],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[1,12],0,0,0,0,0,0,[[19,19],19],[[19,-1],19,[[21,[20]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,19],[22,22],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],19],[[],19],[[19,19],6],[[22,22],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[19,7],8],[[22,7],8],[-1,-1,[]],[-1,-1,[]],[[19,-1],22,[[21,[20]],23]],[-1,-2,[],[]],[-1,-2,[],[]],[19,6],[19,6],[-1,19,[[21,[20]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[24,25],[[17,[4]]]],[[24,1,25],[[4,[0,26]]]],[[],24],[[24,27,28,29,-1],[[17,[4]]],30],[[24,[31,[0]]],4],[-1,-1,[]],[[24,2],6],[[24,1,25],26],[-1,-2,[],[]],0,[[24,2],4],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[-1]]],4,32],[[[16,[-1]],[33,[-2]]],[[17,[4]]],32,32],[[[16,[-1]],2,2,[16,[-1]]],4,32],[[[16,[-1]]],-1,32],[-1,[[16,[-1]]],32],[[[16,[-1]]],[[16,[-1]]],[32,34]],[-1,-1,[]],[-1,-1,[]],[[-1,27,[31,[35]],36],[[16,[-1]]],32],[[[16,[-1]],2],[[37,[-1]]],32],[[[16,[-1]]],26,32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[-1]]],6,32],[[[16,[-1]]],[[38,[-1]]],32],[[[16,[-1]]],2,32],[[[38,[-1]]],2,32],[[[16,[-1]],9,36],[[17,[2]]],32],[[[38,[-1]]],[[39,[-2]]],32,[]],[[[38,[-1]]],[[4,[2,[39,[2]]]]],32],[[[16,[-1]],3,2],[[17,[[16,[-1]]]]],[32,34]],[[[16,[-1]],3,2,[16,[-1]]],[[17,[6]]],32],[[[16,[-1]]],36,32],[[[16,[-1]]],[[40,[9]]],32],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,[[[37,[-1]]],2,32],[[[37,[-1]]],2,32],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1]]],9,32],[[[37,[-1]]],26,32],[[[37,[-1]]],2,32],[[[37,[-1]]],2,32],[[[37,[-1]],7],8,32],[-1,-1,[]],[[[37,[-1]]],41,32],[[[37,[-1]]],2,32],[-1,-2,[],[]],[[[37,[-1]]],6,32],[[[37,[-1]]],9,32],[[[37,[-1]]],[[42,[13]]],32],[[[37,[-1]]],11,32],[[[37,[-1]]],9,32],[[[37,[-1]],3],[[17,[[16,[-1]]]]],[32,34]],[[[37,[-1]],3,[16,[-1]]],[[17,[6]]],32],[[[37,[-1]]],[[40,[9]]],32],[[[37,[-1]]],[[42,[43]]],32],[[[37,[-1]]],26,32],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[[[37,[-1]]],12,32],0,0,0,0,0,[44,2],[35,2],[35,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,[[45,[2]]]],[44,[[45,[2]]]],[35,35],[[-1,-2],4,[],[]],[[[31,[35]],2,2,[39,[13]]],[[17,[[31,[35]]]]]],[[[31,[35]],2,2,11],[[17,[[31,[35]]]]]],[44,5],[35,5],[44,2],[35,2],[35,2],[[35,7],8],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[46,6],[44,6],[44,6],[44,11],[35,11],[[1,26,11,11,41],35],[47,[[39,[-1]]],[]],[44,2],[[35,3],2],[48,11],[35,11],[[35,11,11],4],[[35,11,11],4],[47,[[4,[2,[39,[2]]]]]],[[35,3,29,36,27],47],[-1,-2,[],[]],[-1,13,[]],[46,26],[35,26],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[44,12],[35,12],[35,41],0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,6,3],[[33,[-1]]],32],[[[33,[-1]]],-1,32],[[[33,[-1]]],-1,[32,34]],[[[33,[-1]]],[[17,[4]]],32],[-1,-1,[]],[-1,-2,[],[]],[[[33,[-1]]],[[17,[[16,[-1]]]]],32],[[[33,[-1]]],3,32],[[-1,3],[[33,[-1]]],32],[[[33,[-1]]],13,32],[[[33,[-1]],6],6,32],[[[33,[-1]],3],3,32],[[[33,[-1]],36],36,32],[[[33,[-1]],27,[31,[35]],36],4,32],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,0,[[[49,[-1]]],[],50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[32,28],[32,[[42,[[52,[51]]]]]],[-1,-2,[],[]],[32,29],[-1,[[49,[-1]]],32],[32,[[42,[[52,[53]]]]]],[32,[[42,[[52,[54]]]]]],[[[49,[-1]],9,3,6],[[17,[[16,[-2]]]]],[32,34],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[55,56],0,[57,57],[56,56],[55,55],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[56,-1],[[10,[58,59]]],[[61,[60]],[21,[58]]]],0,[[],57],[[],56],[[],58],[[],58],[-1,[[10,[57]]],62],[-1,[[10,[55]]],62],[[],55],[[57,57],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[55,55],55],[[59,7],8],[[59,7],8],[[57,7],8],[[56,7],8],[[55,7],8],[-1,-1,[]],[63,59],[64,59],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[42,[65]]],[[10,[55,59]]]],[60,[[10,[55,59]]]],[[[39,[60]]],[[10,[55,59]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,56,[[21,[58]]]],[[[39,[58]],[39,[58]],[39,[58]]],[[10,[56,59]]]],0,0,0,[57,36],[[56,13],[[31,[13]]]],[56,[[10,[58,59]]]],[56,[[10,[[31,[58]],59]]]],[[55,-1],55,[[21,[58]]]],[[55,-1],55,[[21,[58]]]],[59,[[39,[66]]]],[[55,-1],55,[[21,[58]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[9,[[10,[57,-1]]],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[55,-1],55,[[21,[58]]]],0,[[56,-1],56,[[21,[58]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[[[42,[65]],60],[[17,[67]]]],0,[67,28],0,0,0,0,[67,[[42,[[52,[51]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,[67,29],0,0,0,[67,[[42,[[52,[53]]]]]],[67,[[42,[[52,[54]]]]]],0,[[[42,[65]]],[[17,[68]]]],[[[42,[65]]],[[17,[68]]]],[[[42,[65]]],[[17,[68]]]],0,0,[68,[[39,[67]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[69,[-1]],-2],[[17,[4]]],32,30],[70,71],[71,71],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[72,28],[72,[[42,[[52,[51]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[72,29],[70,13],[71,13],[[],[[69,[72]]]],[-1,[[69,[-1]]],32],[72,[[42,[[52,[53]]]]]],[72,[[42,[[52,[54]]]]]],[[[69,[-1]],-2],[[17,[4]]],32,70],[[[69,[-1]],-2],[[17,[2]]],32,70],0,[[[69,[-1]]],[[42,[73]]],32],[[[69,[-1]]],[[17,[2]]],32],[[[69,[-1]],-2],74,32,[[21,[74]]]],[[[69,[-1]],-2],4,32,[[21,[13]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[75,7],8],[[75,7],8],[[76,7],8],[[76,7],8],[-1,-1,[]],[-1,-1,[]],[64,76],[-1,-2,[],[]],[-1,-2,[],[]],0,[76,[[39,[66]]]],[-1,13,[]],[-1,13,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[73,6],[73,9],[73,2],[73,77],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],78],[[78,78],78],[[78,78],4],[[78,78],78],[[78,78],4],[78,43],[78,43],[[78,78],78],[[78,78],4],[-1,-2,[],[]],[-1,-2,[],[]],[78,78],[[-1,-2],4,[],[]],[78,78],[[78,78],6],[78,43],[[],78],[[78,78],78],[[],78],[[78,78],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[78,-1],4,[[80,[],[[79,[78]]]]]],[[78,7],8],[[78,7],8],[[78,7],8],[[78,7],8],[[78,7],8],[-1,-1,[]],[43,[[39,[78]]]],[43,78],[43,78],[43,78],[-1,78,[[80,[],[[79,[78]]]]]],[9,[[39,[78]]]],[9,[[10,[78,-1]]],[]],[[78,-1],4,81],[[78,78],4],[[78,78],78],[[78,78],6],[-1,-2,[],[]],[78,-1,[]],[78,6],[78,6],[78,[[82,[78]]]],[78,[[83,[78]]]],[78,78],[[78,78],4],[[78,78,6],4],[[78,78],78],[[78,78],4],[[78,78],78],[-1,-2,[],[]],[[78,78],4],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[[78,78],78],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[84,84],[[-1,-2],4,[],[]],[[],84],[[85,85],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[85,7],8],[[85,7],8],[[84,7],8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[60,[[17,[84]]]],[-1,[[17,[84]]],86],[[84,87],78],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[84,88],[-1,[[4,[-2,-3]]],[],[],[]],[88,[[39,[-1]]],[]],[-1,-2,[],[]],[-1,13,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[25,11,11],5],[-1,-1,[]],[[[42,[65]],2,2,2],[[17,[25]]]],[-1,-2,[],[]],[25,2],[25,2],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[[25,11,11,5],4],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[56,[[17,[89]]]],[[56,90],[[17,[89]]]],[89,28],[89,28],[89,[[42,[[52,[51]]]]]],[-1,-2,[],[]],[89,29],[89,29],[89,[[42,[[52,[53]]]]]],[89,[[42,[[52,[54]]]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[28,25],[[28,5,5],5],[-1,-1,[]],[[28,[42,[-1]]],[[39,[11]]],[[61,[9]]]],[-1,-2,[],[]],[[28,28],4],[[[42,[65]],2],[[17,[28]]]],[[28,11],[[42,[13]]]],0,[[28,[42,[-1]]],[[17,[11]]],[[61,[9]],91]],[[28,84],4],[[28,5,5,5],4],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,92],[93,93],[94,94],[95,95],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],0,0,[[96,96],6],[[92,92],6],[[93,93],6],[[94,94],6],[[95,95],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[96,7],8],[[96,7],8],[[92,7],8],[[93,7],8],[[94,7],8],[[95,7],8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[97,[[39,[92]]]],[95,6],[95,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],95],[[[42,[65]]],[[10,[95,96]]]],[[95,74],74],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[92,97],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,[[95,-1],[[17,[2]]],30],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[98,98],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[98,7],8],[-1,-1,[]],[-1,-1,[]],[[99,43,36],[[17,[41]]]],[[99,43],[[4,[5,5,5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[99,[42,[65]],2],[[0,[[100,[],[[79,[98]]]]]]]],[[12,2],98],[[[42,[65]],2,6],[[17,[99]]]],[[99,65],4],[99,43],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[[99,-1],[[17,[4]]],32],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[101,101],[[-1,-2],4,[],[]],[[102,[42,[65]],2],103],0,[[101,101],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[101,7],8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[65]],2],102],[[43,2],101],[[[31,[43]]],102],[103,[[39,[-1]]],[]],[-1,-2,[],[]],[102,2],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[104,2],105],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[65]],43,2],104],[105,[[39,[-1]]],[]],[104,2],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,0,0,[41,[[42,[12]]]],0,[41,[[42,[12]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,106],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[106,106],[41,41],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],106],[[],41],[41,9],0,[41,26],0,[[106,7],8],[-1,-1,[]],[-1,-1,[]],[41,106],[-1,-1,[]],[106,41],[[107,43,36],[[17,[41]]]],[41,2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[65]],2,43,6],107],[41,9],0,[41,11],0,[41,9],0,[41,9],0,[41,[[42,[43]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[41,[[42,[12]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[108,43],5],[[108,43],[[4,[5,5,5]]]],[-1,-2,[],[]],[[[42,[65]],43,2],108],[[108,43,5],4],[108,43],[108,2],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,0,0,0,0,[[29,99,2],[[10,[4,109]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[109,109],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[109,7],8],[[109,7],8],[-1,-1,[]],[-1,-1,[]],[[29,12],[[17,[41]]]],[[29,12,36],[[17,[41]]]],[[29,12],[[4,[5,5,5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[29,6],[[29,[42,[65]],2],[[0,[[100,[],[[79,[98]]]]]]]],[[99,2],29],[29,43],[-1,13,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[[[42,[65]]],[[110,[[42,[65]],[31,[43]]]]]],[[[42,[65]]],[[110,[[42,[65]],[31,[12]]]]]],[[[42,[65]]],[[110,[[42,[65]],[31,[43]]]]]],[[[42,[65]]],[[110,[[42,[65]],43]]]],[[[42,[65]]],[[110,[[42,[65]],[31,[12]]]]]],0,0,0,0,0,[[90,111],4],[111,[[42,[65]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[111,90],[90,[[42,[65]]]],[90,[[42,[65]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,0,[[],36],[[36,36],36],[[36,36],4],[[36,36],36],[[36,36],4],[36,43],[36,43],[[36,36],36],[[36,36],4],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[[-1,-2],4,[],[]],[36,36],[[36,36],6],[[],36],[[36,36],36],[[],36],[[36,36],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[36,-1],4,[[80,[],[[79,[36]]]]]],[[36,7],8],[[36,7],8],[[36,7],8],[[36,7],8],[[36,7],8],[-1,-1,[]],[43,[[39,[36]]]],[43,36],[43,36],[43,36],[-1,36,[[80,[],[[79,[36]]]]]],[9,[[39,[36]]]],[[36,36],4],[[36,36],36],[[36,36],6],[-1,-2,[],[]],[36,-1,[]],[36,6],[36,6],[36,[[82,[36]]]],[36,[[83,[36]]]],[36,36],[36,36],[[36,36],4],[[36,36,6],4],[[36,36],36],[[36,36],4],[[36,36],36],[-1,-2,[],[]],[[36,36],4],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[[36,36],36],0,0,0,0,0,[12,43],[-1,-2,[],[]],[-1,-2,[],[]],[[65,43],[[17,[12]]]],[12,12],[[-1,-2],4,[],[]],[[12,12],112],[[-1,-2],112,[],[]],[12,65],[[12,12],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[12,7],8],[[12,7],8],[-1,-1,[]],[43,12],[[12,-1],4,81],[-1,-2,[],[]],[12,6],[12,6],[12,6],[12,6],[[65,43],12],[43,12],[[12,12],[[39,[112]]]],[-1,-2,[],[]],[-1,13,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[12,43],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,113,[114,[-1]]],[[114,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[114,[-1]],[114,[-1]]],6,115],[[116,7],8],[[116,7],8],[[[114,[-1]],7],8,117],[-1,-1,[]],[109,116],[118,116],[63,116],[[[119,[[114,[-1]]]]],116,117],[59,116],[64,116],[75,116],[120,116],[121,116],[85,116],[96,116],[122,116],[-1,-1,[]],[[-1,113],[[114,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[116,[[39,[66]]]],[-1,13,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[[116,-1],116,[[21,[13]]]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[27,28],[[17,[4]]]],[[27,2],6],[[123,2],78],[[27,2],78],[[123,2],2],[[27,2],2],[[123,[45,[2]]],78],[[27,[45,[2]]],78],[[27,2],2],[[123,2,2],2],[[27,2,2],2],[27,27],[[-1,-2],4,[],[]],[27,[[42,[2]]]],[[123,[45,[2]]],9],[[27,[45,[2]]],9],[[27,[45,[2]]],9],[27,9],[27,[[42,[87]]]],[[],27],[-1,-1,[]],[-1,-1,[]],[-1,27,[[61,[9]]]],[[27,2],2],[[27,2],2],[-1,-2,[],[]],[-1,-2,[],[]],[27,13],[[],27],[[123,[45,[2]]],9],[[27,[45,[2]]],9],[[27,[45,[2]]],9],[27,9],[27,4],[[124,[45,[2]],87],4],[[124,[45,[2]],87,-1],4,[[100,[],[[79,[87]]]]]],[[124,[45,[2]],13],4],[[124,[45,[2]],9],4],[27,13],[27,[[17,[4]]]],[[27,13],4],[[27,2],2],[[123,[45,[2]]],[[45,[2]]]],[[27,[45,[2]]],[[45,[2]]]],[[27,2],2],[[27,2],2],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[[27,-1],[[17,[4]]],[[126,[27,124],[[125,[[17,[124]]]]]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[9,[[39,[-1]]],[]],[56,[[42,[127]]]],0,[[-1,127,56,28],[[17,[4]]],[]],0,[[120,7],8],[[120,7],8],[128,120],[64,120],[63,120],[-1,-1,[]],0,[-1,-2,[],[]],0,0,[120,[[39,[66]]]],[-1,13,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,0,0,[9,[[39,[-1]]],[]],[56,[[42,[127]]]],[[-1,127,56,28],[[17,[4]]],[]],[[129,28],4],[[129,127,56,28],[[17,[4]]]],0,[9,[[39,[-1]]],[]],[56,[[42,[127]]]],0,[[-1,127,56,28],[[17,[4]]],[]],[[51,27],[[17,[4]]]],[[51,27,124],[[17,[124]]]],[[51,127,56,28],[[17,[4]]]],[51,6],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],130],[-1,-1,[]],[-1,-2,[],[]],[[130,27,124],[[17,[124]]]],[[130,127,56,28],[[17,[4]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[130,6],0,[9,[[39,[-1]]],[]],[56,[[42,[127]]]],[[-1,127,56,28],[[17,[4]]],[]],0,[[53,27,2,19,[31,[1]]],[[17,[2]]]],0,[[53,127,56,28],[[17,[4]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],131],[-1,-1,[]],[-1,-2,[],[]],[[131,27,2,19,[31,[1]]],[[17,[2]]]],[[131,127,56,28],[[17,[4]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[132,132],[[-1,-2],4,[],[]],[[],132],[-1,[[10,[132]]],62],[[132,132],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[132,7],8],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],133],[-1,-1,[]],[-1,-2,[],[]],[[133,27,2,19,[31,[1]]],[[17,[2]]]],[[133,127,56,28],[[17,[4]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,[9,[[39,[-1]]],[]],[56,[[42,[127]]]],[[-1,127,56,28],[[17,[4]]],[]],0,0,[[54,27,[31,[35]],24],[[17,[[31,[35]]]]]],[[54,127,56,28],[[17,[4]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],134],[-1,-1,[]],[-1,-2,[],[]],[[134,27,[31,[35]],24],[[17,[[31,[35]]]]]],[[134,127,56,28],[[17,[4]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],135],[-1,-1,[]],[-1,-2,[],[]],[[135,27,[31,[35]],24],[[17,[[31,[35]]]]]],[[135,127,56,28],[[17,[4]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[136,136],[[-1,-2],4,[],[]],[[136,136],136],[136,[[0,[[100,[],[[79,[11]]]]]]]],[-1,-1,[]],[[136,136],136],[-1,-2,[],[]],[[136,11],6],[-1,136,[[80,[],[[79,[11]]]]]],[136,2],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[[136,136],136],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-1,[]],[[137,9,[39,[138]]],[[17,[139]]]],[-1,-2,[],[]],[-1,-2,[],[]],[29,138],[[],137],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[2,137],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2,-3]]],[],[],[]],[[],140],[141,[[39,[-1]]],[]],[[142,9],141],[[140,9],141],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[[140,29],140],[2,140]],"c":[151,180,1339],"p":[[5,"Node",11],[1,"usize"],[6,"Mode",11],[1,"tuple"],[1,"i16"],[1,"bool"],[5,"Formatter",1504],[8,"Result",1504],[1,"str"],[6,"Result",1505],[1,"u16"],[5,"WordId",1124],[5,"String",1506],[17,"Dictionary"],[10,"Tokenize",11],[5,"MorphemeList",124],[8,"SudachiResult",1161],[5,"TypeId",1507],[5,"CreatedWords",63],[1,"i64"],[10,"Into",1508],[6,"HasWord",63],[10,"Copy",1509],[5,"Lattice",107],[5,"ConnectionMatrix",666],[1,"i32"],[5,"InputBuffer",1234],[5,"Grammar",696],[5,"LexiconSet",993],[10,"Write",1510],[5,"Vec",1511],[10,"DictionaryAccess",266],[5,"StatefulTokenizer",246],[10,"Clone",1512],[5,"ResultNode",189],[5,"InfoSubset",1056],[5,"Morpheme",161],[5,"MorphemeIter",124],[6,"Option",1513],[5,"Ref",1514],[5,"WordInfo",919],[1,"slice"],[1,"u32"],[10,"LatticeNode",189],[5,"Range",1515],[10,"PathCost",189],[5,"NodeSplitIterator",189],[10,"RightId",189],[5,"StatelessTokenizer",266],[10,"Deref",1516],[10,"InputTextPlugin",1333],[5,"Box",1517],[10,"OovProviderPlugin",1354],[10,"PathRewritePlugin",1405],[5,"ConfigBuilder",283],[5,"Config",283],[6,"SurfaceProjection",283],[5,"PathBuf",1518],[6,"ConfigError",283],[5,"Path",1518],[10,"AsRef",1508],[10,"Deserializer",1519],[5,"Error",1520],[5,"Error",1521],[1,"u8"],[10,"Error",1522],[5,"LoadedDictionary",383],[5,"DictionaryLoader",383],[5,"DictBuilder",427],[10,"AsDataSource",427],[6,"DataSource",427],[6,"NoDic",427],[5,"DictPartReport",529],[5,"SystemTime",1523],[5,"DicBuildError",474],[6,"BuildFailure",474],[5,"Duration",1524],[5,"CategoryType",541],[17,"Item"],[10,"IntoIterator",1525],[10,"Hasher",1526],[5,"Iter",1527],[5,"IterNames",1527],[5,"CharacterCategory",619],[6,"Error",619],[10,"BufRead",1510],[1,"char"],[5,"CharCategoryIter",619],[5,"JapaneseDictionary",679],[5,"SudachiDicData",1032],[10,"ToString",1506],[6,"HeaderVersion",719],[6,"SystemDictVersion",719],[6,"UserDictVersion",719],[5,"Header",719],[6,"HeaderError",719],[1,"u64"],[5,"LexiconEntry",821],[5,"Lexicon",821],[10,"Iterator",1528],[5,"TrieEntry",857],[5,"Trie",857],[5,"TrieEntryIter",857],[5,"WordIdTable",898],[5,"WordIdIter",898],[5,"WordInfoData",919],[5,"WordInfos",919],[5,"WordParams",979],[6,"LexiconSetError",993],[8,"SudachiNomResult",1161],[6,"Storage",1032],[6,"Ordering",1529],[6,"ErrorKind",1530],[6,"SudachiNomError",1161],[10,"PartialEq",1529],[6,"SudachiError",1161],[10,"Debug",1504],[6,"Error",1531],[6,"Err",1532],[6,"PluginError",1295],[5,"FromUtf16Error",1506],[5,"ParseIntError",1533],[10,"InputTextIndex",1234],[5,"InputEditor",1234],[17,"Output"],[10,"FnOnce",1534],[6,"Value",1535],[6,"Error",1536],[10,"EditConnectionCostPlugin",1327],[5,"DefaultInputTextPlugin",1342],[5,"MeCabOovPlugin",1363],[6,"BoundaryMode",1374],[5,"SimpleOovPlugin",1394],[5,"JoinKatakanaOovPlugin",1413],[5,"JoinNumericPlugin",1424],[5,"PosMatcher",1435],[5,"SentenceDetector",1458],[5,"NonBreakChecker",1458],[1,"isize"],[5,"SentenceSplitter",1479],[5,"SentenceIter",1479],[10,"SplitSentences",1479],[8,"DicWriteResult",474],[15,"InvalidSize",522],[15,"InvalidFieldSize",522],[15,"SplitFormatError",522],[15,"ErrWithContext",1230],[15,"Io",1230],[10,"PluginCategory",1295],[15,"Libloading",1325]],"b":[[35,"impl-Debug-for-Mode"],[36,"impl-Display-for-Mode"],[330,"impl-Debug-for-ConfigError"],[331,"impl-Display-for-ConfigError"],[336,"impl-From%3CError%3E-for-ConfigError"],[337,"impl-From%3CError%3E-for-ConfigError"],[503,"impl-Display-for-DicBuildError"],[504,"impl-Debug-for-DicBuildError"],[505,"impl-Display-for-BuildFailure"],[506,"impl-Debug-for-BuildFailure"],[565,"impl-CategoryType"],[566,"impl-Flags-for-CategoryType"],[584,"impl-LowerHex-for-CategoryType"],[585,"impl-Debug-for-CategoryType"],[586,"impl-Binary-for-CategoryType"],[587,"impl-Octal-for-CategoryType"],[588,"impl-UpperHex-for-CategoryType"],[591,"impl-CategoryType"],[592,"impl-Flags-for-CategoryType"],[639,"impl-Display-for-Error"],[640,"impl-Debug-for-Error"],[685,"impl-JapaneseDictionary"],[686,"impl-DictionaryAccess-for-JapaneseDictionary"],[689,"impl-JapaneseDictionary"],[690,"impl-DictionaryAccess-for-JapaneseDictionary"],[776,"impl-Display-for-HeaderError"],[777,"impl-Debug-for-HeaderError"],[1007,"impl-Debug-for-LexiconSetError"],[1008,"impl-Display-for-LexiconSetError"],[1072,"impl-Flags-for-InfoSubset"],[1073,"impl-InfoSubset"],[1090,"impl-Debug-for-InfoSubset"],[1091,"impl-Binary-for-InfoSubset"],[1092,"impl-Octal-for-InfoSubset"],[1093,"impl-LowerHex-for-InfoSubset"],[1094,"impl-UpperHex-for-InfoSubset"],[1097,"impl-InfoSubset"],[1098,"impl-Flags-for-InfoSubset"],[1142,"impl-Debug-for-WordId"],[1143,"impl-Display-for-WordId"],[1201,"impl-Debug-for-SudachiError"],[1202,"impl-Display-for-SudachiError"],[1205,"impl-From%3CLexiconSetError%3E-for-SudachiError"],[1206,"impl-From%3CError%3E-for-SudachiError"],[1207,"impl-From%3CError%3E-for-SudachiError"],[1208,"impl-From%3CErr%3CSudachiNomError%3CI%3E%3E%3E-for-SudachiError"],[1209,"impl-From%3CConfigError%3E-for-SudachiError"],[1210,"impl-From%3CError%3E-for-SudachiError"],[1211,"impl-From%3CDicBuildError%3E-for-SudachiError"],[1212,"impl-From%3CPluginError%3E-for-SudachiError"],[1213,"impl-From%3CFromUtf16Error%3E-for-SudachiError"],[1214,"impl-From%3CError%3E-for-SudachiError"],[1215,"impl-From%3CHeaderError%3E-for-SudachiError"],[1216,"impl-From%3CParseIntError%3E-for-SudachiError"],[1310,"impl-Display-for-PluginError"],[1311,"impl-Debug-for-PluginError"],[1312,"impl-From%3CError%3E-for-PluginError"],[1313,"impl-From%3CError%3E-for-PluginError"],[1314,"impl-From%3CError%3E-for-PluginError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
